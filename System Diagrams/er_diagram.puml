@startuml ChatGPT_ER_Diagram
title Entity-Relationship Diagram - ChatGPT-like Application

!define ENTITY entity
!define TABLE class

ENTITY User {
    +id: UUID <<PK>>
    --
    username: String
    email: String
    created_at: DateTime
    last_login: DateTime
    preferences: JSON
    theme: String
    default_model: String
}

ENTITY Conversation {
    +id: UUID <<PK>>
    user_id: UUID <<FK>>
    --
    title: String
    created_at: DateTime
    updated_at: DateTime
    is_archived: Boolean
    message_count: Integer
    model_used: String
    total_tokens: Integer
}

ENTITY Message {
    +id: UUID <<PK>>
    conversation_id: UUID <<FK>>
    --
    content: Text
    role: Enum(user, assistant, system)
    created_at: DateTime
    token_count: Integer
    model_used: String
    processing_time: Float
    parent_message_id: UUID <<FK>>
}

ENTITY Model {
    +id: UUID <<PK>>
    --
    name: String
    display_name: String
    description: Text
    size_gb: Float
    downloaded: Boolean
    version: String
    parameters: JSON
    created_at: DateTime
    last_used: DateTime
}

ENTITY Session {
    +id: UUID <<PK>>
    user_id: UUID <<FK>>
    --
    session_token: String
    created_at: DateTime
    expires_at: DateTime
    is_active: Boolean
    user_agent: String
    ip_address: String
}

ENTITY ChatHistory {
    +id: UUID <<PK>>
    user_id: UUID <<FK>>
    conversation_id: UUID <<FK>>
    --
    export_format: String
    exported_at: DateTime
    file_path: String
    file_size: Integer
}

ENTITY UserPreferences {
    +id: UUID <<PK>>
    user_id: UUID <<FK>>
    --
    theme: String
    language: String
    default_model: String
    max_tokens: Integer
    temperature: Float
    auto_save: Boolean
    export_format: String
    created_at: DateTime
    updated_at: DateTime
}

ENTITY ErrorLog {
    +id: UUID <<PK>>
    user_id: UUID <<FK>>
    conversation_id: UUID <<FK>>
    --
    error_type: String
    error_message: Text
    stack_trace: Text
    created_at: DateTime
    resolved: Boolean
    severity: Enum(low, medium, high, critical)
}

ENTITY ModelUsage {
    +id: UUID <<PK>>
    user_id: UUID <<FK>>
    model_id: UUID <<FK>>
    conversation_id: UUID <<FK>>
    --
    tokens_used: Integer
    processing_time: Float
    created_at: DateTime
    success: Boolean
    response_quality: Float
}

' Relationships
User ||--o{ Conversation : "has"
User ||--o{ Session : "creates"
User ||--|| UserPreferences : "configures"
User ||--o{ ChatHistory : "exports"
User ||--o{ ErrorLog : "encounters"
User ||--o{ ModelUsage : "uses"

Conversation ||--o{ Message : "contains"
Conversation ||--o{ ChatHistory : "exported as"
Conversation ||--o{ ErrorLog : "may have"
Conversation ||--o{ ModelUsage : "tracks"

Message ||--o{ Message : "replies to"
Message }o--|| Model : "generated by"

Model ||--o{ ModelUsage : "tracked in"

Session }o--|| User : "belongs to"

ChatHistory }o--|| Conversation : "exports"
ChatHistory }o--|| User : "created by"

ErrorLog }o--|| User : "reported by"
ErrorLog }o--|| Conversation : "occurred in"

ModelUsage }o--|| User : "tracked for"
ModelUsage }o--|| Model : "measures"
ModelUsage }o--|| Conversation : "within"

note bottom of Message
    Messages can be threaded
    using parent_message_id
    for conversation branching
end note

note top of Model
    Models represent locally
    available AI models via Ollama
    (e.g., llama2, codellama, mistral)
end note

note right of UserPreferences
    Stored locally or in database
    Contains user customization
    settings and AI model preferences
end note

note left of ErrorLog
    Tracks errors for debugging
    and improving user experience
    Includes Ollama service errors
end note

@enduml
